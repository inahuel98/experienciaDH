Introduccion

--Pilares educativos
.aprender a aprender
.aprender las bases
.aprender a pensar
.aprender haciendo

Elementos de la programacion 
-descomposicion: consiste en tomar el problema y desatircularlo en problemas mas pequenios y manejables.
-patrones: al tenerproblemas mas chicos buscamos patrones con problemas anteriores que nos permitan resolverlos de manera mas sencilla.
-abstraccion: eliminar distorsiones del problema, dejar de lado informacion irrelevante y analizar en forma logica el problema.
-algoritmos: presentar los pasos a seguir para la resolucion de nuestros problemas.

NodeJS nos permite ejecutar codigo en JavaScript y no depender de la ejecucion del mismo en navegadores, al instalar nodeJS estamos instalando un entorno de ejecucion.

-variable, espacio de memoria que nos guardaran algun dato.
se puede definir con: var, let(recomendado)
y si es una constante: const.
Es importante saber que el nombre puede estar formado solo por letras, numeros y los simbolos $ y _, no puede empezar con numeros ni contener caracteres con acentos. 
en JS se recomienda usar CamelCase

Tipos de datos:podemos dividirlos en datos primitivos y datos complejos o compuestos

datos raros:
-not a number;
-null;
-undefined;

objeto literal: se usan las llaves y se setean con clave:valor, (es similar a diccionarios en python)
Lista/array: se usan corchetes, el orden empieza desde 0.

Operadores: 
-comparacion simple "==" (devuelven datos booleanos)
-comparacion estricta "===" deben ser del mismo tipo de dato para que devuelva true.

para saber el tipo de dato que contiene una variable podemos usar el "typeof"

operador and "&&"
operador or "||"
operador not "!"

Los condicionales nos permite controlar el flujo de nuestro programa.
en switch recuerdo que si tengo mas de un caso donde puedo ejecutar el mismo codigo puedo agruparlo de la siguiente manera:
case 1:
case 2:
case 3:
	{lo que quiero que haga};
	break;


Funciones: Es un bloque de codigo que nos permite realizar una tarea en particular. para ejecutarse necesita ser invocada.
Funciones regulares
Funciones compactas (las arrow functions)
Funciones callbacks
-funciones expresadas: son aquellas que se asigna como valor  auna variable.
-funciones declaradas: son aquellas que recibe un nombre formal y no se asigna como valor a una variable.

Llamamos parametros a las variables que escribimos cundo definimos la funcion
Llamamos argumentos a los valores que enviamos cuando invocamos la funcion

algunos metodos usados con string:
string.length(devuelve el largo contando los caracteres)


Arrow functions: es una manera mas compacta de crear o expresar funciones. Es necesario que sean asignadas como valor a una variable si es necesario reutilizarla o tambien se usa directamente como una funcion anonima.

Callback, nos permite recibir funciones como parametros de una funcion, tal como con datos .
puedo combinar una funcion callback pasando una funcion arrow como parametro

una funcion anonima la puedo llamar: function(){code} como no se pueden llamar por su nombre usualmente seran llamadas por funciones callback, tambien las puedo asignar a una variable de esta forma seria una funcion expresada.


Array: tambien llamados como matriz unidimensional o vector, es una estructura que nos permite almacenar mas de un valor, incluso de diferentes tipos. Se pueden manipular debito a que tienen muchas funciones llamadas metodos.

la longitud de un array siempre sera dada por la cantidad de elemento que contenga. para saber el numero podemos usar el methodo .length 

para agregar un elemento (al final del array) usamos el methodo .push() en donde el parametro que le pasaremos sera el elemento a agregar.

para sacar el ultimo elemento del array se debe usar el metodo .pop(), ese ultimo elemento sera retornado.

para sacar el primer elemento del array se pueda usar el metodo .shift(), y al igual que el .pop()podra retornar el elemento.

para agregar elementos al inicio del array podemos usar el methodo .unshift() y pasarle por paramentros los elementos que deseamos

el methodo .indexOf() retorna el indice de donde se encuentre el valor pasado por parametro, si no se encuentra devolvera -1, tambien existe un method similar llamado .lastIndexOf() que realiza la misma busqueda pero desde atras hacia adelante.

el method .join() permite unifiquicar todos los elementos de un array en un string separados por comas, y ademas se puede pasar por parametro cualquier elemento para usarlo como separador.

otra manera de saber si un elemento se encuentra en un arraz es usando el method .includes() el cual le pasamos por parametro el elemento a buscar y en caso de encontrarlo devolver un booleano con el valor true, caso contrario devolvera un false.

como un String es un objeto, en ella podemos tambien usar methods como con los array

por ejemplo podemos usar .length para obtener la cantidad de caracteres que la componen.

tambien puedo usar el metodo .indexOf() el cual me retornara el indice de donde esta el caracter buscado o desde donde empieza el string buscado

.slice() nos permite tomar una parte del string, por parametro se pasa el indice desde y hasta donde tomar el string(opcinal el hasta)

.trim() nos permite eliminar espacios en blanco al principio y final de la cadena de texto sin eliminar los espacios internos que la cadena tenga, recuerdo que retorna y no modifica la cadena original

.split() es usado para pasar un string a un array , pasando por parametro el delimitador que se usara para saber en donde separar el string

.replace() nos permite reemplazar partes de un string, para eso como primer parametro indico la porcion que sera reeemplaza, y en el segundo parametro indico que reemplazara.

Ciclos:
nos permiten repetir instrucciones de manera sencilla. podemos hacerlo una determinada cantidad de veces o  mientras se cumpla la condicion preestablecida.
estructura basica del for:
for(inicio; condicion; modificador){
	codigo}

estructura basica del while:
while (condicion) {
	codigo
	modificador para que en algun momento la condicion sea false}

las utilidades mas utiles de los ciclos es la de recorrer los aaray.

Objetos Literales(similares a diccionarios de python)
El par clave-valor se las llama propiedades.
para acceder al valor de las propiedades se usar el Dot Notation.
Para separar las propiedades se usan las comas.
Los objetos tambien tienen metodos(almacenadas en las mismas propiedades).Para ejecutarlos tambien se usa el dot notation.
dentro del objeto se puede usar el "this" para autoreferenciarse.

Constructor de los objetos.
Podes crear una funcion constructora el nombre de la misma debera empezar con letra mayuscula por convencion para distinguir de las funciones tradicionales, los parametros que reciba normalmente sera las propiedades del objeto que sera creado.
Para asignarle a una variable antes de llamarla se debe anteponer la palabra "new"

Estructura basica de un objeto literal:
let auto = { patente: "AC 123 AD"};
puede contener atributos con valor y tambien metodos.

funciones constructoras: nos sirve como molde para luego crear los objetos que necesitemos.
Para crear un objeto es necesario anteponer la palabra New antes de llamar a la funcion constructora

Sistemas de modulos
Modulos: son bloques de codigos genericos que tienen un objetivo definido.
los modulos nativos de node estan en su pagina.
la funcion require() toma un string (que es la ruta ./) , y retorna algo que debe almacernase en una variable.
Tipos de modulos:
-nativos que ya vienen instalados al crear un proyecto de Nodejs
-de terceros que podemos instalarlos usando npm
-propios que son aquellos que creamos y exportamos usando module.exports (siempre escrita al final del codigo)

Libreria FIleSystem
.readFileSync() nos permite leer un archivo, como parametros toma primero la ruta del archivo a leer y el segundo parametro sera la codificacion que usara para leer.
Podemos anteponer el __dirname en caso de ejecutar el script desde un directorio diferente al del script.

Para exportar modulos propios podemos usar la propiedad export de Module: module.exports = variable


