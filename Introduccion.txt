Introduccion

--Pilares educativos
.aprender a aprender
.aprender las bases
.aprender a pensar
.aprender haciendo

Elementos de la programacion 
-descomposicion: consiste en tomar el problema y desatircularlo en problemas mas pequenios y manejables.
-patrones: al tenerproblemas mas chicos buscamos patrones con problemas anteriores que nos permitan resolverlos de manera mas sencilla.
-abstraccion: eliminar distorsiones del problema, dejar de lado informacion irrelevante y analizar en forma logica el problema.
-algoritmos: presentar los pasos a seguir para la resolucion de nuestros problemas.

NodeJS nos permite ejecutar codigo en JavaScript y no depender de la ejecucion del mismo en navegadores, al instalar nodeJS estamos instalando un entorno de ejecucion.

-variable, espacio de memoria que nos guardaran algun dato.
se puede definir con: var, let(recomendado)
y si es una constante: const.
Es importante saber que el nombre puede estar formado solo por letras, numeros y los simbolos $ y _, no puede empezar con numeros ni contener caracteres con acentos. 
en JS se recomienda usar CamelCase

Tipos de datos:podemos dividirlos en datos primitivos y datos complejos o compuestos

datos raros:
-not a number;
-null;
-undefined;

objeto literal: se usan las llaves y se setean con clave:valor, (es similar a diccionarios en python)
Lista/array: se usan corchetes, el orden empieza desde 0.

Operadores: 
-comparacion simple "==" (devuelven datos booleanos)
-comparacion estricta "===" deben ser del mismo tipo de dato para que devuelva true.

para saber el tipo de dato que contiene una variable podemos usar el "typeof"

operador and "&&"
operador or "||"
operador not "!"

Los condicionales nos permite controlar el flujo de nuestro programa.
en switch recuerdo que si tengo mas de un caso donde puedo ejecutar el mismo codigo puedo agruparlo de la siguiente manera:
case 1:
case 2:
case 3:
	{lo que quiero que haga};
	break;


Funciones: Es un bloque de codigo que nos permite realizar una tarea en particular. para ejecutarse necesita ser invocada.
Funciones regulares
Funciones compactas (las arrow functions)
Funciones callbacks
-funciones expresadas: son aquellas que se asigna como valor  auna variable.
-funciones declaradas: son aquellas que recibe un nombre formal y no se asigna como valor a una variable.

Llamamos parametros a las variables que escribimos cundo definimos la funcion
Llamamos argumentos a los valores que enviamos cuando invocamos la funcion

algunos metodos usados con string:
string.length(devuelve el largo contando los caracteres)


Arrow functions: es una manera mas compacta de crear o expresar funciones. Es necesario que sean asignadas como valor a una variable si es necesario reutilizarla o tambien se usa directamente como una funcion anonima.

Callback, nos permite recibir funciones como parametros de una funcion, tal como con datos .
puedo combinar una funcion callback pasando una funcion arrow como parametro

una funcion anonima la puedo llamar: function(){code} como no se pueden llamar por su nombre usualmente seran llamadas por funciones callback, tambien las puedo asignar a una variable de esta forma seria una funcion expresada.










